name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  POSTGRES_USER: zero2prod
  POSTGRES_PASSWORD: zero2prod
  POSTGRES_DATABASE: zero2prod
  POSTGRES_HOST: 127.0.0.1
  POSTGRES_PORT: 5432

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Build `DATABASE_URL` dynamically
        run: |
          export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}"
          echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV

      - name: Show `DATABASE_URL`
        run: echo $DATABASE_URL

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry and index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          # Wait for database to be ready, break after 1 minute
          TIMEOUT=12 # 12 retries (12 * 5 seconds = 60 seconds max)
          COUNT=0
          until docker compose exec postgres pg_isready -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for database to be ready..."
            sleep 5
            COUNT=$((COUNT+1))
            if [ $COUNT -ge $TIMEOUT ]; then
              echo "Timeout: Database did not become ready after 1 minute."
              docker-compose logs postgres
              exit 1
            fi
          done

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          components: clippy, rustfmt

      - name: Run migrations
        run: |
          cargo install sqlx-cli --no-default-features --features native-tls,postgres || echo "sqlx-cli is already installed"
          sqlx migrate run

      - name: Build Rust project
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Run lint checks
        run: cargo clippy -- -D warnings

      - name: Run rustfmt check
        run: cargo fmt -- --check

      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: Run security audit
        run: |
          cargo install cargo-audit || echo "cargo-audit is already installed"
          cargo audit
